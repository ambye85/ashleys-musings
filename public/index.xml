<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ashley&#39;s musings</title>
    <link>https://ambye85.github.io/</link>
    <description>Recent content on Ashley&#39;s musings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>Copyright &amp;copy; Ashley Bye</copyright>
    <lastBuildDate>Wed, 12 Dec 2018 12:00:00 +0100</lastBuildDate>
    
	<atom:link href="https://ambye85.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Unit testing external API&#39;s</title>
      <link>https://ambye85.github.io/posts/unit-testing-external-apis/</link>
      <pubDate>Wed, 12 Dec 2018 12:00:00 +0100</pubDate>
      
      <guid>https://ambye85.github.io/posts/unit-testing-external-apis/</guid>
      <description>I’m currently working on a project to implement a HTTP server. Now, you might be wondering why, given that there are already several great HTTP server implementations, such as Apache and nginx? I have no plans to release this project, but it’s a fantastic project to learn about sockets and the difficulties in testing hard to test aspects of a system.
When I first started learning about unit testing, and specifically about mocking, one of the rules I came across was “don’t mock what you don’t own”.</description>
    </item>
    
    <item>
      <title>Top down TDD vs bottom up TDD</title>
      <link>https://ambye85.github.io/posts/top-down-tdd-vs-bottom-up-tdd/</link>
      <pubDate>Tue, 27 Nov 2018 12:00:00 +0100</pubDate>
      
      <guid>https://ambye85.github.io/posts/top-down-tdd-vs-bottom-up-tdd/</guid>
      <description>One of the benefits of undertaking a software crafting apprenticeship at 8th Light is having opportunity to experiment with new technology stacks and new techniques. Having been asked to implement a console game of Tic Tac Toe in Java, a language I am relatively familiar with, I decided to take the opportunity to give top down TDD a spin.
What is top down TDD? There are two schools of thought when it comes to TDD.</description>
    </item>
    
    <item>
      <title>React, jest, babel and yarn - notes to self</title>
      <link>https://ambye85.github.io/posts/react-jest-babel-yarn-notes-to-self/</link>
      <pubDate>Sat, 24 Nov 2018 12:00:00 +0100</pubDate>
      
      <guid>https://ambye85.github.io/posts/react-jest-babel-yarn-notes-to-self/</guid>
      <description>This blog post is a set of notes for my future self on how to set up a basic React project using Yarn, with babel for compilation and Jest as the test framework. I’ve included a simple &amp;lsquo;Hello World&amp;rsquo; unit test to make sure everything is correctly hooked up.
Use asdf to install NodeJS:
asdf plugin-list-all asdf plugin-add nodejs asdf list-all nodejs asdf install nodejs 11.1.0 asdf global nodejs 11.1.0  To create a React app, first install the create-react-app package:</description>
    </item>
    
    <item>
      <title>Ruby tic-tac-toe - optimising a minimax player for a 4x4 board</title>
      <link>https://ambye85.github.io/posts/ruby-tictactoe-optimising-a-minimax-player-for-a-4x4-board/</link>
      <pubDate>Mon, 12 Nov 2018 12:00:00 +0100</pubDate>
      
      <guid>https://ambye85.github.io/posts/ruby-tictactoe-optimising-a-minimax-player-for-a-4x4-board/</guid>
      <description>If you’ve been following my previous posts, you’ll know that I’ve been learning Ruby and developing a game of TicTacToe in the process. I’ve just finished implementing a new set of requirements to allow games to be played on a 4x4 board, against an unbeatable computer player. With some algorithmic optimisations, the computer player can choose a first move in less than a second. I’ll explain how I achieved that in the remainder of this post.</description>
    </item>
    
    <item>
      <title>Rspec - redirecting stdout</title>
      <link>https://ambye85.github.io/posts/rspec-redirecting-stdout/</link>
      <pubDate>Mon, 29 Oct 2018 12:00:00 +0100</pubDate>
      
      <guid>https://ambye85.github.io/posts/rspec-redirecting-stdout/</guid>
      <description>Have you ever found yourself wishing that during unit testing you could hide the terminal output generated by your program? With RSpec, this is pretty simple. In fact, it’s just vanilla Ruby as we’ll see.
To hide terminal output during unit tests, we need to redirect where Ruby sends output. On *nix based systems, we typically do this by sending output to /dev/null:
before(:all) do @original_stdout = $stdout @original_stderr = $stderr $stdout = File.</description>
    </item>
    
    <item>
      <title>Ruby - equality for all</title>
      <link>https://ambye85.github.io/posts/ruby-equality-for-all/</link>
      <pubDate>Fri, 26 Oct 2018 12:00:00 +0100</pubDate>
      
      <guid>https://ambye85.github.io/posts/ruby-equality-for-all/</guid>
      <description>Having predominantly programmed in Java, when creating classes I’m used to overriding equals() and hashcode(). During an exercise converting Kent Beck’s Money Example from Java to Ruby, to help me learn Ruby and improve my TDD skills, I overrode the equivalent methods (equal? and hash) in one of my classes.
The need for doing this arose because I wanted to use a class, Point, as the key to a hash. Looking up the value from the hash would be done by instantiating a new instance of Point and passing this as the key.</description>
    </item>
    
    <item>
      <title>Ruby and Travis CI - the start of a continuous integration pipeline</title>
      <link>https://ambye85.github.io/posts/ruby-and-travis-ci-the-start-of-a-continuous-integration-pipeline/</link>
      <pubDate>Wed, 24 Oct 2018 12:00:00 +0100</pubDate>
      
      <guid>https://ambye85.github.io/posts/ruby-and-travis-ci-the-start-of-a-continuous-integration-pipeline/</guid>
      <description>I’m about to embark on writing the venerable game of TicTacToe in Ruby. Given that I want to develop in a way that enables each of the 3 tenets of DevOps to be achieved, I need to configure the project for Continuous Integration (CI).
CI is important in DevOps because it helps to optimise development for speed, which increases flow. By optimising for speed, quality should be guaranteed because poor quality code will break and decrease speed.</description>
    </item>
    
    <item>
      <title>TDD - the simplest code to pass a failing test isn&#39;t always the simplest code</title>
      <link>https://ambye85.github.io/posts/tdd-the-simplest-code-to-pass-a-failing-test-isnt-always-the-simplest-code/</link>
      <pubDate>Mon, 22 Oct 2018 12:00:00 +0100</pubDate>
      
      <guid>https://ambye85.github.io/posts/tdd-the-simplest-code-to-pass-a-failing-test-isnt-always-the-simplest-code/</guid>
      <description>In my previous post, I wrote about setting up a simple Ruby project structure and getting a &amp;lsquo;Hello, world!&amp;rsquo; unit test to pass. The next step on my journey to learn Ruby is to complete the coin change kata. For readers not familiar with this kata, the premise is simple: for a given monetary amount in pence produce a list containing the smallest possible number of coins needed to have that amount.</description>
    </item>
    
    <item>
      <title>Learning Ruby - a simple project structure and a passing unit test</title>
      <link>https://ambye85.github.io/posts/learning-ruby-a-simple-project-structure-and-a-passing-unit-test/</link>
      <pubDate>Fri, 19 Oct 2018 12:00:00 +0100</pubDate>
      
      <guid>https://ambye85.github.io/posts/learning-ruby-a-simple-project-structure-and-a-passing-unit-test/</guid>
      <description>Today, I started to learn Ruby. Learning a new language is simple — learn the syntax, constructs and over time pick up the idiomatic ways of doing things. Right? Not so much.
Yes, learning the language is important. My programming has been predominantly in statically typed languages, most notably Java. I have sufficient familiarity with the standard project structure for Java projects and the tooling to support dependency management and unit testing to be reasonably productive.</description>
    </item>
    
  </channel>
</rss>